from Neural_Network import Neural_Networkimport numpy as npimport pandas as pdclass Neural_Network_Builder:        def __init__(self, X_train, Y_train, activation_function, optimizer, epochs):        self.epochs = epochs        self.nn = Neural_Network(X_train, Y_train, activation_function, optimizer)        def train_model(self):                #creating a list to keep track of loss per iterations        error = []        accuracy = []                for i in range(self.epochs):            #forward propogation function will return the loss            e,a = self.nn.feedforward()            accuracy.append(a)            error.append(e)            #we will backpropagate to update weights to reduce loss            self.nn.backpropagation()                #return the loss array for all epochs        return error, accuracy    def test_model(self, input_vector, y):        test_accuracy = self.nn.test_model(input_vector, y)        return test_accuracy